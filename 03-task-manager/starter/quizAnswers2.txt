
1. 
In this lesson, you created a middleware function called asyncWrapper. Why?

It's a middleware to handle async error. 

We have asynchronous operation and it becomes redundant for every controller setting up the bloc 'try{} catch(error)', 
so a better solution is to use a middleware asyncWrapper to prevent the  repetition of code. 
This way as well, it's easier to maintain the code and to handle different types of error



2.
Suppose that you want to make sure that both a status code and an error message are sent back
to the user when they request the URL for a task that does not exist. 
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. 
Complete the code:

const { createCustomError } = require("../errors/custom-error");

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  

  if (!task) {  

    // your code here  
     return next(createCustomError(`No task with id : ${taskID}`,404))

  }  
  res.status(200).json({ task });  
});  
